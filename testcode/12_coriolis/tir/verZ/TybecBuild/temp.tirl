;-- =============================================================================
;-- Company : Unversity of Glasgow, Comuting Science
;-- Author: Syed Waqar Nabi
;--
;-- Create Date : 2014.10.27
;-- Project Name : TyTra
;--
;-- Dependencies :
;--
;-- Revision :
;-- Revision 0.01. File Created
;-- Revision 0.02. 2019.06.19: Updated to tybec-17 version, incorporated as a test case
;--
;-- Conventions :
;-- =============================================================================
;-- =============================================================================
;-- General Description
;-- -----------------------------------------------------------------------------
;-- Tytra-IR BACKEND file for Coriolis Kernel
;--
;-- While this kernsl has two modes, at run time we may beed to choose one or the
;-- other, set by the host-controlled MODE variable
;-- so we instantiate BOTH mode kernels
;-- =============================================================================
;--I have the same arithmetic instructions for float32/int for now
;--constants initiliazed from values taken from C execution
;--no point computing constants in HDL (and back-end code gen
;--not able to generate units with both constant inputs anyway, though
;--that could be easily fixed
;--mode also defined as a macro
; -----------------------------------------------------------------------------
;-- coriolis_ker0
; -----------------------------------------------------------------------------
;-- If one operand is constant in a leaf node, it MUST be the SECOND operand. This is a silly limitation, will fail in non-commutative operations anyway. FIXME.
define void @coriolis_ker0 ( float32 %u
                            , float32 %v
                            , float32 %un
                            , float32 %vn
                            ) pipe
{
  float32 %mul = mul float32 %u, 0.999013
  float32 %mul1 = mul float32 %v, -0.062832
  float32 %add = add float32 %mul, %mul1
  float32 %un = udiv float32 %add, 1.000987
  float32 %mul4 = mul float32 %v, 0.999013
  float32 %mul5 = mul float32 %u, -0.062832
  float32 %sub6 = sub float32 %mul4, %mul5
  float32 %vn = udiv float32 %sub6, 1.000987
  ret void
}
;--WN: had to divide this ker1 into 2 sub kernels, see NOTES for 2019.07.15:
;-- all functions must be weakly connected graphs, no disconnect allowed (for code gen purposes) FIXME
; -----------------------------------------------------------------------------
;-- coriolis_ker1
; -----------------------------------------------------------------------------
;--define void @coriolis_ker1 ( float32 %x
;-- , float32 %y
;-- , float32 %un
;-- , float32 %vn
;-- , float32 %xn
;-- , float32 %yn
;-- ) pipe
;--{
;-- float32 %mul = mul float32 432.000000, %un
;-- float32 %div = udiv float32 %mul, 1000.0
;-- float32 %xn = add float32 %x, %div
;--
;-- float32 %mul1 = mul float32 432.000000, %vn
;-- float32 %div2 = udiv float32 %mul1, 1000.0
;-- float32 %yn = add float32 %y, %div2
;-- ret void
;--}
; -----------------------------------------------------------------------------
;-- coriolis_ker1_subker0
; -----------------------------------------------------------------------------
;--WN: had to divide this intt
define void @coriolis_ker1_subker0 (
    float32 %x
  , float32 %un
  , float32 %xn
  ) pipe
{
  float32 %mul = mul float32 %un, 432.000000
  float32 %div = udiv float32 %mul, 1000.0
  float32 %xn = add float32 %x, %div
  ret void
}
; -----------------------------------------------------------------------------
;-- coriolis_ker1_subker1
; -----------------------------------------------------------------------------
;--WN: had to divide this intt
define void @coriolis_ker1_subker1 (
    float32 %y
  , float32 %vn
  , float32 %yn
  ) pipe
{
  float32 %mul1 = mul float32 %vn, 432.000000
  float32 %div2 = udiv float32 %mul1, 1000.0
  float32 %yn = add float32 %y, %div2
  ret void
}
; -----------------------------------------------------------------------------
;-- kernel_top
; -----------------------------------------------------------------------------
define void @kernel_top( float32 %u
                        , float32 %v
                        , float32 %x
                        , float32 %y
                        , float32 %un
                        , float32 %vn
                        , float32 %xn
                        , float32 %yn
                        ) pipe
{
;-- I cannot allow output arguments in hierarhichial functions to *also* be intermediate
;-- arguments between peer kernels
;-- That is because each module/node has to be synchronized at the output, so all
;-- outputs must be valid _at the same index_ at the same time.
;-- If I put delay buffers to synchronize such local-use-also ouputs to other outputs,
;-- then their local consumption will suffer latency, delaying the other outputs further still, so
;-- and so on ad inifintum...
  call @coriolis_ker0 ( float32 %u
                      , float32 %v
                      , float32 %un_local
                      , float32 %vn_local
                      )
  call @coriolis_ker1_subker0 ( float32 %x
                      , float32 %un_local
                      , float32 %xn
                      )
  call @coriolis_ker1_subker1 ( float32 %y
                      , float32 %vn_local
                      , float32 %yn
                      )
  float32 %un = load float32 %un_local
  float32 %vn = load float32 %vn_local
  ret void
}
; ----------------------------------------------------------
; -- ** MAIN
; ----------------------------------------------------------
define void @main () {
  %u = alloca [262144 x float32], addrspace(1)
  %v = alloca [262144 x float32], addrspace(1)
  %x = alloca [262144 x float32], addrspace(1)
  %y = alloca [262144 x float32], addrspace(1)
  %un = alloca [262144 x float32], addrspace(1)
  %vn = alloca [262144 x float32], addrspace(1)
  %xn = alloca [262144 x float32], addrspace(1)
  %yn = alloca [262144 x float32], addrspace(1)
  %u_stream = streamread float32, float32* %u , !tir.stream.type !stream1d, !tir.stream.size !262144
  %v_stream = streamread float32, float32* %v , !tir.stream.type !stream1d, !tir.stream.size !262144
  %x_stream = streamread float32, float32* %x , !tir.stream.type !stream1d, !tir.stream.size !262144
  %y_stream = streamread float32, float32* %y , !tir.stream.type !stream1d, !tir.stream.size !262144
  streamwrite float32 %un_stream, float32* %un, !tir.stream.type !stream1d, !tir.stream.size !262144
  streamwrite float32 %vn_stream, float32* %vn, !tir.stream.type !stream1d, !tir.stream.size !262144
  streamwrite float32 %xn_stream, float32* %xn, !tir.stream.type !stream1d, !tir.stream.size !262144
  streamwrite float32 %yn_stream, float32* %yn, !tir.stream.type !stream1d, !tir.stream.size !262144
  ;--call the top level kernel and pass it the streams and the constant
  call @kernel_top (
     float32 %u_stream
    ,float32 %v_stream
    ,float32 %x_stream
    ,float32 %y_stream
    ,float32 %un_stream
    ,float32 %vn_stream
    ,float32 %xn_stream
    ,float32 %yn_stream
    )
  ret void
}
