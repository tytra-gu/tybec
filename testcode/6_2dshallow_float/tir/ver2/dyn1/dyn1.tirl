;-- =============================================================================
;-- Company      : Unversity of Glasgow, Comuting Science
;-- Author:        Syed Waqar Nabi
;-- 
;-- Create Date  : 2014.11.03
;-- Project Name : TyTra
;--
;-- Dependencies : 
;--
;-- Revision     : 
;-- Revision 0.01. File Created
;-- 
;-- Conventions  : 
;-- =============================================================================
;--
;-- =============================================================================
;-- General Description
;-- -----------------------------------------------------------------------------
;-- Tytra-IR BACKEND file DYN1 kernel from 2d-shallow-water
;--
;--
;-- =============================================================================
;--

#define ROWS    8
#define COLS    8
#define SIZE    (ROWS*COLS)

;--I have the same arithmetic instructions for data_t/int for now
#define fadd add
#define fsub sub
#define fmul mul
#define fdiv udiv

;--#define data_t float32
#define data_t i32

;--constants (init to random values)
#define dx  1 
#define dy  2
#define dt  3
#define g   10
;--#define CONST1 10 
#define CONST1 -30
  ;-- dt*g

; -----------------------------------------------------------------------------
; dyn1
; -----------------------------------------------------------------------------

define void @dyn1  ( data_t %u_j_k
                   , data_t %v_j_k
                   , data_t %eta_j_k
                   , data_t %eta_j_kp1
                   , data_t %eta_jp1_k
                   , data_t %wet_j_k
                   , data_t %wet_j_kp1
                   , data_t %wet_jp1_k
                   , data_t %j
                   , data_t %k
                   , data_t %un_j_k
                   , data_t %vn_j_k
                   , data_t %dummyout0
                   , data_t %dummyout1                  
                   ) pipe
{
  ;-- boundary condition (
  data_t %local1  = icmp eq i32 %j, 0
  data_t %local2  = icmp eq i32 %j, (ROWS-1)
  data_t %local3  = icmp eq i32 %k, 0
  data_t %local4  = icmp eq i32 %k, (COLS-1)
  data_t %local5  = or i32 %local1, %local2                      
  data_t %local6  = or i32 %local3, %local4                      
  data_t %local7  = or i32 %local5, %local6       
  ;-- )
    ;--%local7 is true for boundaries

  
  ;-- boundary branch {
    data_t %un_j_k0  = load data_t %u_j_k
    data_t %vn_j_k0  = load data_t %v_j_k
  ;--}
  
  ;-- other branch {
    ;-------
    ;-- duu
    ;-------
    ;--fold these constants
    ;--data_t %sub    = fsub data_t 0, dt
    ;--data_t %mul    = fmul data_t %sub, g
    data_t %sub6   = fsub data_t %eta_j_kp1, %eta_j_k
    data_t %mul7   = fmul data_t %sub6, CONST1
    data_t %duu    = fdiv data_t %mul7, dx
    
    ;-------
    ;--dvv
    ;-------
    ;--fold these constants
    ;--data_t %sub8   = fsub data_t 0, dt
    ;--data_t %mul9   = fmul data_t %sub8, g
    data_t %sub10  = fsub data_t %eta_jp1_k, %eta_j_k
    data_t %mul11  = fmul data_t %sub10, CONST1
    data_t %dvv    = fdiv data_t %mul11, dy
    
    ;-------
    ;--uu
    ;-------
    data_t %uu     = load data_t %u_j_k
    
    ;-------
    ;--vv
    ;-------
    data_t %vv     = load data_t %v_j_k
    
    ;-------
    ;--un
    ;------
    ;-- condition for updating un inside this non-boundary branch
    ;-- if (  ( (wet_j_k == 1)
    ;--          && ( (wet_j_kp1 == 1) || (duu > 0.0)))
    ;--     || ( (wet_j_kp1 == 1) && (duu < 0.0))     
    ;--     ){
    ;--      *un_j_k = uu+duu;
    ;--  }//if
    ;-- (
    data_t %ulocal8  = icmp eq data_t %wet_j_k, 1      ;--(wet_j_k == 1)
    data_t %ulocal9  = icmp eq data_t %wet_j_kp1, 1    ;--(wet_j_kp1 == 1)
    data_t %ulocal10 = icmp gt data_t %duu, 0          ;--(duu > 0.0)
    data_t %ulocal11 = icmp lt data_t %duu, 0          ;--(duu < 0.0)
    data_t %ulocal12 = or  data_t %ulocal9, %ulocal10  ;--( (wet_j_kp1 == 1) || (duu > 0.0))
    data_t %ulocal13 = and data_t %ulocal8, %ulocal12  ;--( (wet_j_k == 1)
                                                       ;--          && ( (wet_j_kp1 == 1) || (duu > 0.0)))
    data_t %ulocal14 = and data_t %ulocal9,  %ulocal11 ;--(wet_j_kp1 == 1) && (duu < 0.0)
    data_t %ulocal15 = or  data_t %ulocal13, %ulocal14 ;--the whole condition
    ;-- ) local15 is the condition
    
    ;--{ true branch 
      data_t %un_j_k1_br0 = fadd data_t %uu, %duu
    ;--}
    
    ;--{ false branch
    data_t %un_j_k1_br1 = load data_t %u_j_k
    ;--}
    
    data_t %un_j_k1   = select data_t %ulocal15, data_t %un_j_k1_br0, data_t %un_j_k1_br1
    
    ;-------
    ;--vn
    ;------
    ;-- condition for updating vn inside this non-boundary branch
    ;--  if (  (  (wet_j_k == 1)
    ;--         && ( (wet_jp1_k == 1) || (dvv > 0.0)))
    ;--     || ((wet_jp1_k == 1) && (dvv < 0.0))
    ;--     ){
    ;--      *vn_j_k = vv+dvv;
    ;--  }    
    ;-- (
    data_t %vlocal8  = icmp eq data_t %wet_j_k, 1     ;--(wet_j_k == 1)
    data_t %vlocal9  = icmp eq data_t %wet_jp1_k, 1   ;--(wet_jp1_k == 1)
    data_t %vlocal10 = icmp gt data_t %dvv, 0         ;--(dvv > 0.0)
    data_t %vlocal11 = icmp lt data_t %dvv, 0         ;--(dvv < 0.0)
    data_t %vlocal12 = or  data_t %vlocal9, %vlocal10 ;--( (wet_j_kp1 == 1) || (dvv > 0.0))
    data_t %vlocal13 = and data_t %vlocal8, %vlocal12 ;--( (wet_j_k == 1)
                                                      ;--          && ( (wet_jp1_k == 1) || (dvv > 0.0)))
    data_t %vlocal14 = and data_t %vlocal9 , %vlocal11 ;--(wet_jp1_k == 1) && (dvv < 0.0)
    data_t %vlocal15 = or  data_t %vlocal13, %vlocal14 ;--the whole condition
    ;-- ) local15 is the condition
    
    ;--{ true branch 
      ;--data_t %vn_j_k1_br0 = fadd data_t %vv, %dvv
      data_t %vn_j_k1_br0 = pow data_t %vv, %dvv
    ;--}
    
    ;--{ false branch
    data_t %vn_j_k1_br1 = load data_t %v_j_k
    ;--}
    
    data_t %vn_j_k1   = select data_t %vlocal15, data_t %vn_j_k1_br0, data_t %vn_j_k1_br1
  ;--}

  ;--(outer) select
  data_t %un_j_k = select data_t %local7, data_t %un_j_k0, data_t %un_j_k1
  data_t %vn_j_k = select data_t %local7, data_t %vn_j_k0, data_t %vn_j_k1
  
  ;--dummy outs to balance IO width
  data_t %dummyout0 = select data_t %local7, data_t %un_j_k0, data_t %un_j_k1
    ;--dummyout0 is same as un
  data_t %dummyout1 = select data_t %local7, data_t %vn_j_k0, data_t %vn_j_k1
  
  ret void
}



; ----------------------------------------------------------
; -- top
; ----------------------------------------------------------
define void @kernelTop ( data_t %u_j_k
                       , data_t %v_j_k
                       , data_t %eta_j_k
                       , data_t %wet_j_k
                       , data_t %un_j_k
                       , data_t %vn_j_k
                       , data_t %dummyout0
                       , data_t %dummyout1
                       ) pipe
{
  ;----------------------------------------------
  ;--offset streams
  ;----------------------------------------------
  data_t %eta_j_kp1 = offstream  %eta_j_k, !tir.stream.offset !+1
  data_t %eta_jp1_k = offstream  %eta_j_k, !tir.stream.offset !+COLS
  data_t %wet_j_kp1 = offstream  %wet_j_k, !tir.stream.offset !+1
  data_t %wet_jp1_k = offstream  %wet_j_k, !tir.stream.offset !+COLS
  
  ;----------------------------------------------
  ;--auto indices
  ;----------------------------------------------
  data_t %j = autoindex %u_j_k , !tir.aindex.type       !2d
                               , !tir.aindex.range      !0 !ROWS-1
                               , !tir.aindex.dimNum     !1
                               , !tir.aindex.nestOver   !%k
                              
  data_t %k = autoindex %u_j_k , !tir.aindex.type       !2d
                               , !tir.aindex.range      !0 !COLS-1
                               , !tir.aindex.dimNum     !2  
                               
  ;----------------------------------------------
  ;-- Connect peer KERNELS for CG-pipeline
  ;----------------------------------------------
  call @dyn1  ( data_t %u_j_k
              , data_t %v_j_k
              , data_t %eta_j_k
              , data_t %eta_j_kp1
              , data_t %eta_jp1_k
              , data_t %wet_j_k
              , data_t %wet_j_kp1
              , data_t %wet_jp1_k
              , data_t %j
              , data_t %k
              , data_t %un_j_k
              , data_t %vn_j_k
              , data_t %dummyout0
              , data_t %dummyout1
              ) 
  
}

; ----------------------------------------------------------
; -- ** MAIN
; ----------------------------------------------------------
define void @main () {
  %u_j_k      = alloca [SIZE x data_t], addrspace(1)
  %v_j_k      = alloca [SIZE x data_t], addrspace(1)
  %eta_j_k    = alloca [SIZE x data_t], addrspace(1)
  %wet_j_k    = alloca [SIZE x data_t], addrspace(1)
  %un_j_k     = alloca [SIZE x data_t], addrspace(1)
  %vn_j_k     = alloca [SIZE x data_t], addrspace(1)
  %dummyout0  = alloca [SIZE x data_t], addrspace(1)
  %dummyout1  = alloca [SIZE x data_t], addrspace(1)
  
  %u_j_k_stream_load      = streamread data_t, data_t*  %u_j_k        , !tir.stream.type   !stream1d , !tir.stream.size   !SIZE , !tir.stream.saddr  !0, !tir.stream.stride !1
  %v_j_k_stream_load      = streamread data_t, data_t*  %v_j_k        , !tir.stream.type   !stream1d , !tir.stream.size   !SIZE , !tir.stream.saddr  !0, !tir.stream.stride !1
  %eta_j_k_stream_load    = streamread data_t, data_t*  %eta_j_k      , !tir.stream.type   !stream1d , !tir.stream.size   !SIZE , !tir.stream.saddr  !0, !tir.stream.stride !1
  %wet_j_k_stream_load    = streamread data_t, data_t*  %wet_j_k      , !tir.stream.type   !stream1d , !tir.stream.size   !SIZE , !tir.stream.saddr  !0, !tir.stream.stride !1
  
  streamwrite data_t %un_j_k_stream_store, data_t* %un_j_k, !tir.stream.type   !stream1d, !tir.stream.saddr  !0, !tir.stream.size   !SIZE, !tir.stream.stride !1
  streamwrite data_t %vn_j_k_stream_store, data_t* %vn_j_k, !tir.stream.type   !stream1d, !tir.stream.saddr  !0, !tir.stream.size   !SIZE, !tir.stream.stride !1
  streamwrite data_t %dummyout0_stream_store, data_t* %dummyout0, !tir.stream.type   !stream1d, !tir.stream.saddr  !0, !tir.stream.size   !SIZE, !tir.stream.stride !1
  streamwrite data_t %dummyout1_stream_store, data_t* %dummyout1, !tir.stream.type   !stream1d, !tir.stream.saddr  !0, !tir.stream.size   !SIZE, !tir.stream.stride !1

  call @kernelTop  ( data_t %u_j_k_stream_load
                   , data_t %v_j_k_stream_load
                   , data_t %eta_j_k_stream_load
                   , data_t %wet_j_k_stream_load
                   , data_t %un_j_k_stream_store
                   , data_t %vn_j_k_stream_store
                   , data_t %dummyout0_stream_store
                   , data_t %dummyout1_stream_store
                   )
  ret void
}
